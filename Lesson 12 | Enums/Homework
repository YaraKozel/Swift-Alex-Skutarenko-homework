//1 Створити enum з шахматними фігурами. Кожна фігура має мати колір та позицію (буква + цифра). Створити декілька фігур з розміщенням на дошці так, 
щоб чорному корою був мат. Помістити фігури у масив.
 
enum ChessColor: String {
    case White, Black
}

enum ChessLetter: String {
    case A, B, C, D, E, F, G, H
}

enum ChessDigit: Int {
    case number = 1, two, three, four, five, six, seven, eight
}

enum ChessType: String {
    case King = "King"
    case Queen = "Queen"
    case Bishop = "Bishop"
    case Knight = "Knight"
    case Rook = "Rook"
    case Pawn = "Pawn"
}

typealias ChessFigure = (ChessColor, ChessType, ChessLetter, ChessDigit)

var blackKing = (ChessColor.Black, ChessType.King, ChessLetter.B, ChessDigit.eight)
var newPos = ("D", 3)
var whiteQueen = (ChessColor.White, ChessType.Queen, ChessLetter.B, ChessDigit.seven)
var whiteKing = (ChessColor.White, ChessType.King, ChessLetter.C, ChessDigit.six)

// another variation of syntax

enum ChessType2 {
    case figure(Bool, String, Int, String)
    // true — black, false — white
}

let myFiguress: [ChessType2] = [
    .figure(true, "King", 8, "B"),
    .figure(false, "Quenn", 7, "B"),
    .figure(true, "King", 6, "C")
]

//2 Створити функцію, яка виводить в консоль назву фігури, колір та положення (Raw Value). Роздрукувати всі фігури в масиві. Створити функцію, 
яка приймає масив фігур і виводить в консоль інформацію про кожну фігуру в ньому.

let myFigures: [ChessFigure] = [blackKing, whiteQueen, whiteKing]

func printFigure(_ figures: [ChessFigure]) {
    figures.forEach { figure in
        let (color, type, letter, number) = figure
        print("\(color.rawValue) \(type.rawValue) stands on a \(letter.rawValue)\(number.rawValue) position.")
    }
}

printFigure(myFigures)

// 3 Використовуючи unicodes, вивести в консоль вашу дошку. Це має бути функція, яка друкує шахматну дошку з фігурами (приймає масив фігур і нічого не повертає). 

let lettersArray = ["A","B","C","D","E","F","G","H"]
let numbersArray = [1,2,3,4,5,6,7,8]

func chessBoard(array: [ChessFigure]) {
    
    var chessString = ""
    
    for (indexOfNumber, chessNumber) in numbersArray.enumerated().reversed() {
// 7, 8(number)
        chessString += String(chessNumber) // 8
        
    lettersLoop: for (indexOfLetter, chessLetter) in lettersArray.enumerated() {
        // 2, c(letter) //(8B) 7b
        for figure in array {
            let (color, type, letter, number) = figure
            
            if (letter.rawValue == chessLetter) && (number.rawValue == chessNumber) {
                switch (type, color) {
                case (.King, .White): chessString += " ♔"; continue lettersLoop
                case (.Queen, .White): chessString += " ♕"; continue lettersLoop
                case (.Bishop, .White): chessString += " ♗"; continue lettersLoop
                case (.Knight, .White): chessString += " ♘"; continue lettersLoop
                case (.Rook, .White): chessString += " ♖"; continue lettersLoop
                case (.Pawn, .White): chessString += " ♙"; continue lettersLoop
                case (.King, .Black): chessString += " ♚"; continue lettersLoop
                case (.Queen, .Black): chessString += " ♛"; continue lettersLoop
                case (.Bishop, .Black): chessString += " ♝"; continue lettersLoop
                case (.Knight, .Black): chessString += " ♞"; continue lettersLoop
                case (.Rook, .Black): chessString += " ♜"; continue lettersLoop
                case (.Pawn, .Black): chessString += " ♟"; continue lettersLoop
                }
            }
        }
        chessString += ((indexOfNumber % 2) == (indexOfLetter % 2)) ? "◽️" : "▪️"
    }
        print(chessString)
        chessString = ""
    }
}

chessBoard(array: myFigures)
