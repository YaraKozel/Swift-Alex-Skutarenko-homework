//1 C—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Artist, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å: —ñ–º º—è, –ø—Ä—ñ–∑–≤–∏—â–µ —ñ –º–µ—Ç–æ–¥ "–í–∏—Å—Ç—É–ø". –£ –∫–æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –º–∞—î –±—É—Ç–∏ —Å–≤—ñ–π –≤–∏—Å—Ç—É–ø, –∞ —Ö—É–¥–æ–≤–∂–Ω–∏–∫ –Ω–µ—Ö–∞–π —Å—Ç–∞–≤–∏—Ç—å —â–æ—Å—å —ñ–Ω—à–µ ‚Äî
–º—ñ–Ω—è—î —ñ–º'—è –Ω–∞ —Å–≤–æ—î —Å—Ü–µ–Ω—ñ—á–Ω–µ. –ö–æ–ª–∏ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ –≤–∏—Å—Ç—É–ø, –ø–æ–∫–∞–∑–∞—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—ñ —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ —ñ —Å–∞–º –≤–∏—Å—Ç—É–ø. –ü–æ–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ—Ö –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤, –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –∫–æ–∂–Ω–æ–º—É —ñ 
–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥.

class Artist {
    var name : String = ""
    var surname : String = ""
    var fullName : String { return name + " " + surname }
    
    func performance() -> String {
       return "\(fullName) is perfoming üí•"
    }
    
    init(name: String, surname: String) {
            self.name = name
            self.surname = surname
        }
}

class Dancer : Artist {
    override func performance() -> String {
        return " \(name) \(surname) is dancing üíÉ"
    }
}

class Singer : Artist {
    override func performance() -> String {
        return " \(name) \(surname) is singing üé§"
    }
}

class Actor : Artist {
    override func performance() -> String {
        return " \(name) \(surname) is playing a role üé≠"
    }
}

class Painter : Artist {
    override var fullName: String { return "Pee Pee Pou Pou"}
    override func performance() -> String {
        return " My name is Painter and I paint"
    }
}

var dancer = Dancer(name: "Tatiana", surname: "Ninja")
var singer = Singer(name: "Mykola", surname: "Shchur")
var actor = Actor(name: "Djenifer", surname: "Eniston")
var painter = Painter(name: "Van", surname: "Gogh")

var performance = [dancer, singer, actor, painter]

for i in performance { print(i.performance()) }

//2 –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —ñ –¥–æ–¥–∞—Ç–∏ 3 computed properties: —à–≤–∏–¥–∫—ñ—Å—Ç—å, –º—ñ—Å—Ç–∫—ñ—Å—Ç—å —Ç–∞ —Ü—ñ–Ω–∞. –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å—ñ–≤ —ñ –ø–µ—Ä–µ–æ–ø—Ä–∏–¥—ñ–ª–∏—Ç–∏ —É –Ω–∏—Ö properties. 
–£ computed properties –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É –Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞—á–µ–Ω–Ω—è + –∑—Ä–æ–±–∏—Ç–∏ –º–µ—Ç–æ–¥, —è–∫–∏–π —Ä–æ–∑—Ä–∞—Ö—É—î —á–∞—Å, –≤–∞—Ä—Ç—ñ—Å—Ç—å —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ö–∑–¥–æ–∫, —â–æ–± –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ —Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π
–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é —É.

class Transport {
    var type : String { return "Transport: " }
    var speed : Int { return 0 }
    var capacity : Int { return 0 }
    var coast : Int { return 0 }
        
    func calculate(persons: Int, distance: Int) -> (count: Int, time: Double, money: Int) {
        let count = (persons % capacity) == 0 ? persons/capacity : persons/capacity + 1
        let time = Double(count) * Double(distance)/Double(speed)
        let money = count * self.coast
        return (count,time,money)
    }
}

class Plane : Transport {
    override var type: String { super.type + "Plane" }
    override var speed: Int { return 1000 }
    override var capacity: Int { return 100 }
    override var coast: Int { return 100000 }
}

class Ship : Transport {
    override var type: String { super.type + "Ship" }
    override var speed: Int { return 80 }
    override var capacity: Int { return 300 }
    override var coast: Int { return 200000 }
}

class Helicopter : Transport {
    override var type: String { super.type + "Helicopter" }
    override var speed: Int { return 160 }
    override var capacity: Int { return 6 }
    override var coast: Int { return 10000 }
}

class Car : Transport {
    override var type: String { super.type + "Car" }
    override var speed: Int { return 100 }
    override var capacity: Int { return 5 }
    override var coast: Int { return 5000 }
}

let plane = Plane()
let ship = Ship()
let helicopter = Helicopter()
let car = Car()

var arrOfTransport: [Transport] = [plane, ship, helicopter, car]

func checkTransport(arr: [Transport], people: Int, distance: Int) {
    print("search for a suitable vehicle to transport \(people) people on \(distance) km")
    for vehicle in arrOfTransport {
        print("\n \(vehicle.type)")
        let (count, time, money) = vehicle.calculate(persons: people, distance: distance)
        print(" Number of shipments: \(count)")
        print(" Time for all shipments: \(time) hours")
        print(" Coast of all shipments: \(money) eur")
    }
}

checkTransport(arr: arrOfTransport, people: 100, distance: 500)


//3 –Ñ 5 –∫–ª–∞—Å—ñ–≤ ‚Äî –ª—é–¥–∏, –∫—Ä–æ–∫–æ–¥–∏–ª–∏, –º–∞–≤–ø–∏, —Å–æ–±–∞–∫–∏ —ñ –∂–∏—Ä–∞—Ñ–∏. –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ –∫–ª–∞—Å–∏. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –æ–± º—î–∫—Ç—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É. –ü–æ–º—ñ—Å—Ç–∏—Ç–∏ —ó—Ö —É –º–∞—Å–∏–≤ —ñ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏
–∫—ñ–ª—å–∫—ñ—Å—Ç—å. –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç —á–æ—Ç–∏—Ä–∏–Ω–æ–≥–∏—Ö.

class Beings {}
class Quadruped : Beings {}
class Animals : Quadruped {}
class Mammals : Animals {}
class HomoSapiens : Beings {}
class Reptiles : Animals {}

class Humans : HomoSapiens {}

class Crocodiles : Reptiles {}
    
class Monkeys : Mammals {}
    
class Dogs : Mammals {}

class Giraffes : Mammals {}

var person = Humans()
var crocodile1 = Crocodiles()
var crocodile2 = Crocodiles()
var monkey1 = Monkeys()
var monkey2 = Monkeys()
var monkey3 = Monkeys()
var dog1 = Dogs()
var dog2 = Dogs()
var dog3 = Dogs()
var dog4 = Dogs()
var giraffe = Giraffes()

var allBeings = [person, crocodile1, crocodile2, monkey1, monkey2, monkey3, dog1, dog2, dog3, dog4, giraffe]
print("\nThe number of all beings is \(allBeings.count)")
print("4 legs have \(allBeings.filter{ $0 is Quadruped }.count) animals")
