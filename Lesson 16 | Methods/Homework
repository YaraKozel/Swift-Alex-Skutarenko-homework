–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø –ö—ñ–º–Ω–∞—Ç–∞. –£ –∫—ñ–º–Ω–∞—Ç–∏ —î —Ä–æ–∑–º—ñ—Ä–∏ W i H. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω—å–æ–≥–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ X i Y. –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏
–ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫—ñ–º–Ω–∞—Ç—ñ.
–ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–¥–∞—Ç–∏ –º–µ—Ç–æ–¥ —ñ—Ç–∏, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î enum –≤–ª—ñ–≤–æ, –≤–ø—Ä–∞–≤–æ, –≤–ø–µ—Ä–µ–¥, –Ω–∞–∑–∞–¥.–¶–µ–π –º–µ—Ç–æ–¥ –º–∞—î –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–æ, —â–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–æ–∂–µ –ø–æ–∫–∏–¥–∞—Ç–∏
–º–µ–∂—ñ –∫—ñ–º–Ω–∞—Ç–∏. –ü–µ—Ä–µ—Å—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –≥—Ä–∞—Ñ—ñ—á–Ω–æ. 
–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–µ–∂ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ X i Y. –Ø—â–∏–∫ —Ç–µ–∂ –Ω–µ –º–æ–∂–µ –ø–æ–∫–∏–¥–∞—Ç–∏ –º–µ–∂—ñ –∫—ñ–º–Ω–∞—Ç–∏ —ñ –º–∞—î –±—É—Ç–∏ —Ä–æ–∑–¥—Ä—É–∫–æ–≤–∞–Ω–∏–º —Ä–∞–∑–æ–º —ñ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º.
–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ –ø–µ—Ä–µ—Å—É–≤–∞—Ç–∏ —è—â–∏–∫, —è–∫—â–æ –≤—ñ–Ω —Å—Ç–æ—ó—Ç—å –Ω–∞ —Ç–æ–º—É –º—ñ—Å—Ü—ñ, –∫—É–¥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ –ø–µ—Ä–µ–π—Ç–∏. –ì–æ–ª–æ–≤–Ω–µ, —â–æ –∂–æ–¥–µ–Ω –æ–± º—î–∫—Ç –Ω–µ –º–æ–∂–µ –ø–æ–∫–∏–Ω—É—Ç–∏ –º–µ–∂—ñ –∫—ñ–º–Ω–∞—Ç–∏. 
–î–æ–¥–∞—Ç–∏ —Ç–æ—á–∫—É –≤ –∫—ñ–º–Ω–∞—Ç—ñ, –∫—É–¥–∏ —Ü–µ–π —è—â–∏–∫ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Å—É–Ω—É—Ç–∏.

enum SpaceType: String {
    case empty = "‚¨ú"
    case player = "üíÉ"
    case box = "üéÅ"
    case finish = "üö©"
    case gameOver = "üèÜ"
    case wall = "‚¨õ"
    
}
enum Direction: String {
    case left, right, up, down
}

class Room {
    let width: Int
    let height: Int
    var roomArray = [[SpaceType]]()
    
    
    init(width: Int, height: Int) {
        self.width = width
        self.height = height
        for _ in 0..<height {
            var line = [SpaceType]()
            for _ in 0..<width {
                line.append(.empty)
            }
            self.roomArray.append(line)
        }
    }
    
    func show() {
        let topRoom = String(repeating: SpaceType.wall.rawValue, count: roomArray.count + 2)
        print(topRoom)
        for lineArray in roomArray {
            let lineString = lineArray.map { $0.rawValue }.joined()
            print(SpaceType.wall.rawValue + lineString + SpaceType.wall.rawValue)
        }
        print(topRoom)
    }
}

class Box {
    var x: Int
    var y: Int
    let xFinish: Int
    let yFinish: Int
    let room: Room
    init(x: Int, y: Int, xFinish: Int, yFinish: Int, room: Room) {
        self.x = x
        self.y = y
        self.xFinish = xFinish
        self.yFinish = yFinish
        self.room = room
        room.roomArray[y][x] = SpaceType.box
        room.roomArray[yFinish][xFinish] = SpaceType.finish
    }
    func isFinish() -> Bool {
        
        if x == xFinish && y == yFinish {
            room.roomArray[y][x] = .gameOver
            print("Finish")
            return true
        }
        return false
    }
    func move(direction: Direction) -> Bool {
        if isFinish() {
            print("Finish. Game over")
            return false
        }
        print("Box Move:", direction.rawValue)
        var newX = x
        var newY = y
        switch direction {
        case .up:
            if y <= 0 {
                return false
            }
            newY -= 1
        case .down:
            if y >= room.height - 1   {
                return false
            }
            newY += 1
        case .left:
            if x <= 0 {
                return false
            }
            newX -= 1
        case .right:
            if x >= room.width - 1 {
                return false
            }
            newX += 1
        }
        
        if newX != x || newY != y {
            
            room.roomArray[y][x] = SpaceType.empty
            room.roomArray[newY][newX] = SpaceType.box
            x = newX
            y = newY
        }
        
        isFinish()
        return true
    }
}

class Player {
    var x: Int
    var y: Int
    let room: Room
    let box: Box
    
    init(x: Int, y: Int, room: Room, box: Box) {
        self.x = x
        self.y = y
        self.room = room
        self.box = box
        room.roomArray[y][x] = SpaceType.player
    }
    func move(direction: Direction) -> Bool {
        
        print("Player Move:", direction.rawValue)
        var newX = x
        var newY = y
        switch direction {
        case .up:
            if y <= 0 {
                return false
            }
            newY -= 1
        case .down:
            if y >= room.height - 1   {
                return false
            }
            newY += 1
        case .left:
            if x <= 0 {
                return false
            }
            newX -= 1
        case .right:
            if x >= room.width - 1 {
                return false
            }
            newX += 1
        }
        if room.roomArray[newY][newX] == SpaceType.empty || (room.roomArray[newY][newX] == SpaceType.box && box.move(direction: direction)) {
            room.roomArray[y][x] = SpaceType.empty
            room.roomArray[newY][newX] = SpaceType.player
            x = newX
            y = newY
            return true
        }
        if room.roomArray[newY][newX] == SpaceType.gameOver {
            print("That Finish. Game Over")
        }
        return false
    }
}

let room = Room(width: 5, height: 5)
let box = Box(x: 1, y: 1,xFinish: 4, yFinish: 4, room: room)

let player = Player(x: 0, y: 0, room: room, box: box)

room.show()
let moveArray:[Direction]
moveArray = [.right, .down, .down, .left, .down, .right, .right, .right, .up, .right, .down]

for direction in moveArray {
    player.move(direction: direction)
    
    if box.isFinish() {
        room.show()
        break
    }
    room.show()
}





